"""
RFS (Request for Supplier) Generator Utility

This module generates RFS Excel files from BOQ data by removing all cost columns
and keeping only the structural information needed for suppliers to provide quotations.
"""

import os
import pandas as pd
from datetime import datetime
from django.conf import settings
from django.core.files.base import ContentFile
from django.core.files.storage import default_storage
from django.utils import timezone
from ..models import ProjectDocument
from io import BytesIO
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
import pytz


def generate_rfs_buffer_from_boq(boq_items, project_name="Project RFS"):
    """
    Generate RFS Excel file buffer from BOQ items (for project creation)
    Creates a template that matches the BOQ format exactly but with empty cost columns
    
    Args:
        boq_items: List of BOQ item dictionaries
        project_name: Name of the project for the RFS title
        
    Returns:
        BytesIO: Excel file buffer
        
    Raises:
        ValueError: If no BOQ data available
        Exception: If file generation fails
    """
    if not boq_items:
        raise ValueError("No BOQ data available for RFS generation")
    
    try:
        # Create workbook and worksheet
        wb = Workbook()
        ws = wb.active
        ws.title = "RFS"
        
        # Define styling (matching BOQ template)
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_font = Font(bold=True, color="FFFFFF")
        center = Alignment(horizontal="center", vertical="center", wrap_text=True)
        thin = Side(style="thin")
        border = Border(left=thin, right=thin, top=thin, bottom=thin)
        
        # Title
        ws.merge_cells("A1:G1")
        ws["A1"].value = f"Request for Supplier (RFS) - {project_name}"
        ws["A1"].font = Font(bold=True, size=14)
        ws["A1"].alignment = center
        
        # Get current time in Philippine timezone
        ph_tz = pytz.timezone('Asia/Manila')
        ph_time = timezone.now().astimezone(ph_tz)
        
        # Project Info section
        project_info = [
            ("Project Name", project_name),
            ("Document Type", "Request for Supplier (RFS)"),
            ("Generated Date", ph_time.strftime('%Y-%m-%d %H:%M:%S PHT')),
            ("Generated By", "PowerMason System"),
            ("Instructions", "Please provide unit costs and total amounts for each item"),
        ]
        base_row = 4
        for idx, (label, val) in enumerate(project_info):
            r = base_row + idx
            ws.cell(row=r, column=1, value=label).font = Font(bold=True)
            ws.cell(row=r, column=2, value=val)
        
        # Column headers (matching BOQ template)
        headers = [
            "Code",
            "Description", 
            "UOM",
            "Quantity",
            "Unit Cost",
            "Amount",
            "Level",
        ]
        for col_idx, title in enumerate(headers, start=1):
            cell = ws.cell(row=9, column=col_idx, value=title)
            cell.fill = header_fill
            cell.font = header_font
            cell.alignment = center
            cell.border = border
        
        # Process BOQ items and create RFS rows
        start_row = 10
        current_row = start_row
        
        # Group items by division
        divisions = {}
        for item in boq_items:
            division = item.get('division', 'GENERAL REQUIREMENTS')
            if division not in divisions:
                divisions[division] = []
            divisions[division].append(item)
        
        # Create RFS rows following BOQ template structure
        division_totals = []  # Store division totals for grand total calculation
        
        for div_name, items in divisions.items():
            # Division header row
            ws.cell(row=current_row, column=1, value=div_name).font = Font(bold=True)
            ws.cell(row=current_row, column=2, value=div_name).font = Font(bold=True)
            ws.cell(row=current_row, column=5, value="TOTAL:").font = Font(bold=True)
            
            # Calculate division subtotal (sum of all items in this division)
            division_start_row = current_row + 1
            division_items_count = sum(len(task_items) for task_items in [items])
            
            # Create formula for division total (will be calculated by suppliers)
            ws.cell(row=current_row, column=6, value="")  # Empty for suppliers to fill
            ws.cell(row=current_row, column=6).number_format = "#,##0.00"
            
            # Style division row
            div_fill = PatternFill(start_color="FFF9C4", end_color="FFF9C4", fill_type="solid")
            for c in range(1, 8):
                ws.cell(row=current_row, column=c).fill = div_fill
                ws.cell(row=current_row, column=c).border = border
            
            current_row += 1
            
            # Group items by task
            tasks = {}
            for item in items:
                task = item.get('task', 'General')
                if task not in tasks:
                    tasks[task] = []
                tasks[task].append(item)
            
            # Create task and item rows
            for task_name, task_items in tasks.items():
                # Task header row
                ws.cell(row=current_row, column=1, value=task_name).font = Font(bold=True)
                ws.cell(row=current_row, column=2, value=task_name).font = Font(bold=True)
                for c in range(1, 8):
                    ws.cell(row=current_row, column=c).border = border
                current_row += 1
                
                # Individual items
                for item in task_items:
                    # Extract item data
                    code = item.get('code', '')
                    description = item.get('description', '')
                    uom = item.get('uom', '')
                    quantity = item.get('quantity', '')
                    
                    # Create row with empty cost columns
                    ws.cell(row=current_row, column=1, value=code)
                    ws.cell(row=current_row, column=2, value=description)
                    ws.cell(row=current_row, column=3, value=uom)
                    ws.cell(row=current_row, column=4, value=quantity)
                    ws.cell(row=current_row, column=5, value="")  # Unit Cost - empty for supplier to fill
                    ws.cell(row=current_row, column=6, value="")  # Amount - empty for supplier to fill
                    ws.cell(row=current_row, column=7, value=f"=LEN(A{current_row})-LEN(SUBSTITUTE(A{current_row},'.',''))")  # Level formula
                    
                    # Apply borders
                    for c in range(1, 8):
                        ws.cell(row=current_row, column=c).border = border
                    
                    current_row += 1
        
        # Add grand total section
        current_row += 1  # Add spacing
        
        # Grand total row
        ws.cell(row=current_row, column=1, value="PROJECT GRAND TOTAL").font = Font(bold=True, size=12)
        ws.cell(row=current_row, column=2, value="")
        ws.cell(row=current_row, column=5, value="GRAND TOTAL:").font = Font(bold=True, size=12)
        ws.cell(row=current_row, column=6, value="")  # Empty for suppliers to fill
        ws.cell(row=current_row, column=6).number_format = "#,##0.00"
        
        # Style grand total row
        grand_total_fill = PatternFill(start_color="D4E6F1", end_color="D4E6F1", fill_type="solid")
        for c in range(1, 8):
            ws.cell(row=current_row, column=c).fill = grand_total_fill
            ws.cell(row=current_row, column=c).border = border
        
        current_row += 1
        
        # Set column widths (matching BOQ template)
        widths = [18, 50, 12, 12, 14, 16, 8]
        for idx, w in enumerate(widths, start=1):
            ws.column_dimensions[chr(64 + idx)].width = w
        # Hide helper Level column
        ws.column_dimensions['G'].hidden = True
        
        # Add notes section
        notes = (
            "Instructions for Suppliers:\n"
            "- This is a Request for Supplier (RFS) document\n"
            "- Please provide unit costs in the 'Unit Cost' column\n"
            "- Amounts will be calculated automatically (Quantity Ã— Unit Cost)\n"
            "- Fill in the division TOTAL amounts (yellow highlighted rows)\n"
            "- Fill in the PROJECT GRAND TOTAL (blue highlighted row)\n"
            "- All costs should be in PHP (Philippine Peso)\n"
            "- Please return completed quotation within 7 days\n"
            "- For questions, contact the project manager"
        )
        notes_row = current_row + 2
        ws.merge_cells(f"A{notes_row}:G{notes_row + 6}")
        ncell = ws[f"A{notes_row}"]
        ncell.value = notes
        ncell.alignment = Alignment(wrap_text=True)
        
        # Save to buffer
        buf = BytesIO()
        wb.save(buf)
        buf.seek(0)
        return buf
        
    except Exception as e:
        raise Exception(f"Error generating RFS buffer: {str(e)}")


def generate_rfs_from_boq(project_profile):
    """
    Generate RFS Excel file from project's BOQ data
    
    Args:
        project_profile: ProjectProfile instance with BOQ data
        
    Returns:
        str: Path to generated RFS file
        
    Raises:
        ValueError: If no BOQ data available
        Exception: If file generation fails
    """
    if not project_profile.boq_items:
        raise ValueError("No BOQ data available for RFS generation")
    
    try:
        # Convert BOQ items to DataFrame
        boq_data = project_profile.boq_items
        if not isinstance(boq_data, list) or len(boq_data) == 0:
            raise ValueError("BOQ data is empty or invalid format")
        
        # Create DataFrame from BOQ items
        df = pd.DataFrame(boq_data)
        
        # Define columns to keep (remove all cost columns but keep structure)
        columns_to_keep = [
            'division', 'task', 'code', 'description', 'quantity', 'uom'
        ]
        
        # Filter available columns
        available_columns = [col for col in columns_to_keep if col in df.columns]
        
        if not available_columns:
            raise ValueError("No valid BOQ columns found for RFS generation")
        
        # Create RFS DataFrame with only structural columns
        rfs_df = df[available_columns].copy()
        
        # Add empty cost columns to match BOQ structure
        rfs_df['unit_cost'] = ''
        rfs_df['material_cost'] = ''
        rfs_df['labor_cost'] = ''
        rfs_df['equipment_cost'] = ''
        rfs_df['subcontractor_cost'] = ''
        rfs_df['amount'] = ''
        rfs_df['total_cost'] = ''
        
        # Reorder columns to match BOQ structure
        column_order = [
            'division', 'task', 'code', 'description', 'quantity', 'uom',
            'unit_cost', 'material_cost', 'labor_cost', 'equipment_cost', 
            'subcontractor_cost', 'amount', 'total_cost'
        ]
        
        # Only include columns that exist in the original data
        final_columns = []
        for col in column_order:
            if col in rfs_df.columns:
                final_columns.append(col)
        
        rfs_df = rfs_df[final_columns]
        
        # Get current time in Philippine timezone
        ph_tz = pytz.timezone('Asia/Manila')
        ph_time = timezone.now().astimezone(ph_tz)
        
        # Add project information header
        project_info = {
            'Project Name': [project_profile.project_name],
            'Project ID': [project_profile.project_id or 'TBD'],
            'Location': [project_profile.location or 'TBD'],
            'Generated Date': [ph_time.strftime('%Y-%m-%d %H:%M:%S PHT')],
            'Generated By': ['PowerMason System'],
            '': [''],  # Empty row for spacing
        }
        
        # Create project info DataFrame
        project_info_df = pd.DataFrame(project_info)
        
        # Create Excel file in memory
        output = pd.ExcelWriter('temp_rfs.xlsx', engine='openpyxl')
        
        # Write project information
        project_info_df.to_excel(output, sheet_name='Project Info', index=False, header=False)
        
        # Write BOQ items (RFS data)
        rfs_df.to_excel(output, sheet_name='RFS Items', index=False)
        
        # Format the Excel file
        workbook = output.book
        worksheet = workbook['RFS Items']
        
        # Auto-adjust column widths
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)  # Cap at 50 characters
            worksheet.column_dimensions[column_letter].width = adjusted_width
        
        # Add headers styling
        from openpyxl.styles import Font, PatternFill, Alignment
        
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        
        # Apply styling to headers
        for cell in worksheet[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
        
        # Save the workbook
        output.close()
        
        # Read the generated file
        with open('temp_rfs.xlsx', 'rb') as f:
            file_content = f.read()
        
        # Clean up temporary file
        os.remove('temp_rfs.xlsx')
        
        # Generate filename
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"RFS_{project_profile.project_id or 'TBD'}_{timestamp}.xlsx"
        
        # Save to media storage
        file_path = f"rfs_files/{filename}"
        saved_path = default_storage.save(file_path, ContentFile(file_content))
        
        # Update project's RFS file field
        project_profile.rfs_file = saved_path
        project_profile.save(update_fields=['rfs_file'])
        
        # Create ProjectDocument entry
        ProjectDocument.objects.create(
            project=project_profile,
            document_type='RFS',
            title=f"RFS - {project_profile.project_name}",
            description=f"Request for Supplier file generated from BOQ on {timezone.now().strftime('%Y-%m-%d %H:%M:%S')}",
            file=default_storage.open(saved_path),
            uploaded_by=project_profile.created_by,
            is_mandatory=False
        )
        
        return saved_path
        
    except Exception as e:
        # Clean up temporary file if it exists
        if os.path.exists('temp_rfs.xlsx'):
            os.remove('temp_rfs.xlsx')
        raise Exception(f"Failed to generate RFS file: {str(e)}")


def regenerate_rfs_if_needed(project_profile):
    """
    Regenerate RFS file if it doesn't exist or is outdated
    
    Args:
        project_profile: ProjectProfile instance
        
    Returns:
        str: Path to RFS file (existing or newly generated)
    """
    # Check if RFS file exists and is recent
    if project_profile.rfs_file and default_storage.exists(project_profile.rfs_file.name):
        # Check if file is recent (within last 24 hours)
        file_stat = default_storage.stat(project_profile.rfs_file.name)
        file_age = timezone.now().timestamp() - file_stat.st_mtime
        if file_age < 86400:  # 24 hours in seconds
            return project_profile.rfs_file.name
    
    # Regenerate RFS file
    return generate_rfs_from_boq(project_profile)


def get_rfs_download_info(project_profile):
    """
    Get RFS file information for download
    
    Args:
        project_profile: ProjectProfile instance
        
    Returns:
        dict: RFS file information or None if not available
    """
    if not project_profile.rfs_file:
        return None
    
    if not default_storage.exists(project_profile.rfs_file.name):
        return None
    
    try:
        file_stat = default_storage.stat(project_profile.rfs_file.name)
        return {
            'filename': os.path.basename(project_profile.rfs_file.name),
            'file_path': project_profile.rfs_file.name,
            'file_size': file_stat.st_size,
            'created_at': datetime.fromtimestamp(file_stat.st_mtime),
            'download_url': default_storage.url(project_profile.rfs_file.name)
        }
    except Exception:
        return None
